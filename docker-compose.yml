services:
  api:
    build: .
    container_name: blog-api
    restart: always
    ports:
      - '3000:3000'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      - DATABASE_URL=postgresql://${DB_USERNAME:-postgres}:${DB_PASSWORD:-yourpassword}@postgres:5432/${DB_DATABASE:-blogdb}?sslmode=disable
      - REDISHOST=redis
      - REDISPORT=6379

      - NODE_ENV=development
      - PORT=3000
      - JWT_SECRET=Hoss@Home#01120399909
      - HASH_ROUNDS=10
      - ADMIN_FIRST_NAME=Admin
      - ADMIN_LAST_NAME=User
      - ADMIN_EMAIL=admin@blog.com
      - ADMIN_PASSWORD=admin123
      - ADMIN_PHONE=+1234567890

      - DB_USERNAME=postgres
      - DB_PASSWORD=yourpassword
      - DB_DATABASE=blogdb

    volumes:
      - ./src:/app/src
    command: sh -c "sleep 5 && npm run migration:run && npm run start:dev"
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  postgres:
    image: postgres:15-alpine
    container_name: blog-postgres
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=yourpassword
      - POSTGRES_DB=blogdb
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: blog-redis
    restart: always
    ports:
      - '6379:6379'
    volumes:
      - redisdata:/data

volumes:
  pgdata:
  redisdata:
